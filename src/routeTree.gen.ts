/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as AuthedTournamentsImport } from './routes/_authed/tournaments'
import { Route as AuthedMyTournamentsImport } from './routes/_authed/my-tournaments'
import { Route as AuthedTournamentsIndexImport } from './routes/_authed/tournaments.index'
import { Route as DemoStartServerFuncsImport } from './routes/demo.start.server-funcs'
import { Route as DemoFormSimpleImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressImport } from './routes/demo.form.address'
import { Route as AuthedTournamentsIdImport } from './routes/_authed/tournaments.$id'
import { Route as AuthedTournamentsCreateIndexImport } from './routes/_authed/tournaments_.create.index'
import { Route as AuthedProfileIdIndexImport } from './routes/_authed/profile.$id.index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTournamentsRoute = AuthedTournamentsImport.update({
  id: '/tournaments',
  path: '/tournaments',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedMyTournamentsRoute = AuthedMyTournamentsImport.update({
  id: '/my-tournaments',
  path: '/my-tournaments',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTournamentsIndexRoute = AuthedTournamentsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedTournamentsRoute,
} as any)

const DemoStartServerFuncsRoute = DemoStartServerFuncsImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRoute,
} as any)

const DemoFormSimpleRoute = DemoFormSimpleImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRoute,
} as any)

const DemoFormAddressRoute = DemoFormAddressImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTournamentsIdRoute = AuthedTournamentsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthedTournamentsRoute,
} as any)

const AuthedTournamentsCreateIndexRoute =
  AuthedTournamentsCreateIndexImport.update({
    id: '/tournaments_/create/',
    path: '/tournaments/create/',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedProfileIdIndexRoute = AuthedProfileIdIndexImport.update({
  id: '/profile/$id/',
  path: '/profile/$id/',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authed/my-tournaments': {
      id: '/_authed/my-tournaments'
      path: '/my-tournaments'
      fullPath: '/my-tournaments'
      preLoaderRoute: typeof AuthedMyTournamentsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/tournaments': {
      id: '/_authed/tournaments'
      path: '/tournaments'
      fullPath: '/tournaments'
      preLoaderRoute: typeof AuthedTournamentsImport
      parentRoute: typeof AuthedImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/_authed/tournaments/$id': {
      id: '/_authed/tournaments/$id'
      path: '/$id'
      fullPath: '/tournaments/$id'
      preLoaderRoute: typeof AuthedTournamentsIdImport
      parentRoute: typeof AuthedTournamentsImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressImport
      parentRoute: typeof rootRoute
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleImport
      parentRoute: typeof rootRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsImport
      parentRoute: typeof rootRoute
    }
    '/_authed/tournaments/': {
      id: '/_authed/tournaments/'
      path: '/'
      fullPath: '/tournaments/'
      preLoaderRoute: typeof AuthedTournamentsIndexImport
      parentRoute: typeof AuthedTournamentsImport
    }
    '/_authed/profile/$id/': {
      id: '/_authed/profile/$id/'
      path: '/profile/$id'
      fullPath: '/profile/$id'
      preLoaderRoute: typeof AuthedProfileIdIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/tournaments_/create/': {
      id: '/_authed/tournaments_/create/'
      path: '/tournaments/create'
      fullPath: '/tournaments/create'
      preLoaderRoute: typeof AuthedTournamentsCreateIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedTournamentsRouteChildren {
  AuthedTournamentsIdRoute: typeof AuthedTournamentsIdRoute
  AuthedTournamentsIndexRoute: typeof AuthedTournamentsIndexRoute
}

const AuthedTournamentsRouteChildren: AuthedTournamentsRouteChildren = {
  AuthedTournamentsIdRoute: AuthedTournamentsIdRoute,
  AuthedTournamentsIndexRoute: AuthedTournamentsIndexRoute,
}

const AuthedTournamentsRouteWithChildren =
  AuthedTournamentsRoute._addFileChildren(AuthedTournamentsRouteChildren)

interface AuthedRouteChildren {
  AuthedMyTournamentsRoute: typeof AuthedMyTournamentsRoute
  AuthedTournamentsRoute: typeof AuthedTournamentsRouteWithChildren
  AuthedProfileIdIndexRoute: typeof AuthedProfileIdIndexRoute
  AuthedTournamentsCreateIndexRoute: typeof AuthedTournamentsCreateIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedMyTournamentsRoute: AuthedMyTournamentsRoute,
  AuthedTournamentsRoute: AuthedTournamentsRouteWithChildren,
  AuthedProfileIdIndexRoute: AuthedProfileIdIndexRoute,
  AuthedTournamentsCreateIndexRoute: AuthedTournamentsCreateIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/register': typeof RegisterRoute
  '/my-tournaments': typeof AuthedMyTournamentsRoute
  '/tournaments': typeof AuthedTournamentsRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/tournaments/$id': typeof AuthedTournamentsIdRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/tournaments/': typeof AuthedTournamentsIndexRoute
  '/profile/$id': typeof AuthedProfileIdIndexRoute
  '/tournaments/create': typeof AuthedTournamentsCreateIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/register': typeof RegisterRoute
  '/my-tournaments': typeof AuthedMyTournamentsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/tournaments/$id': typeof AuthedTournamentsIdRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/tournaments': typeof AuthedTournamentsIndexRoute
  '/profile/$id': typeof AuthedProfileIdIndexRoute
  '/tournaments/create': typeof AuthedTournamentsCreateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/register': typeof RegisterRoute
  '/_authed/my-tournaments': typeof AuthedMyTournamentsRoute
  '/_authed/tournaments': typeof AuthedTournamentsRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_authed/tournaments/$id': typeof AuthedTournamentsIdRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/_authed/tournaments/': typeof AuthedTournamentsIndexRoute
  '/_authed/profile/$id/': typeof AuthedProfileIdIndexRoute
  '/_authed/tournaments_/create/': typeof AuthedTournamentsCreateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/register'
    | '/my-tournaments'
    | '/tournaments'
    | '/demo/tanstack-query'
    | '/tournaments/$id'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/server-funcs'
    | '/tournaments/'
    | '/profile/$id'
    | '/tournaments/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/register'
    | '/my-tournaments'
    | '/demo/tanstack-query'
    | '/tournaments/$id'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/server-funcs'
    | '/tournaments'
    | '/profile/$id'
    | '/tournaments/create'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/register'
    | '/_authed/my-tournaments'
    | '/_authed/tournaments'
    | '/demo/tanstack-query'
    | '/_authed/tournaments/$id'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/server-funcs'
    | '/_authed/tournaments/'
    | '/_authed/profile/$id/'
    | '/_authed/tournaments_/create/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  RegisterRoute: typeof RegisterRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  RegisterRoute: RegisterRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/logout",
        "/register",
        "/demo/tanstack-query",
        "/demo/form/address",
        "/demo/form/simple",
        "/demo/start/server-funcs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/my-tournaments",
        "/_authed/tournaments",
        "/_authed/profile/$id/",
        "/_authed/tournaments_/create/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_authed/my-tournaments": {
      "filePath": "_authed/my-tournaments.tsx",
      "parent": "/_authed"
    },
    "/_authed/tournaments": {
      "filePath": "_authed/tournaments.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/tournaments/$id",
        "/_authed/tournaments/"
      ]
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/_authed/tournaments/$id": {
      "filePath": "_authed/tournaments.$id.tsx",
      "parent": "/_authed/tournaments"
    },
    "/demo/form/address": {
      "filePath": "demo.form.address.tsx"
    },
    "/demo/form/simple": {
      "filePath": "demo.form.simple.tsx"
    },
    "/demo/start/server-funcs": {
      "filePath": "demo.start.server-funcs.tsx"
    },
    "/_authed/tournaments/": {
      "filePath": "_authed/tournaments.index.tsx",
      "parent": "/_authed/tournaments"
    },
    "/_authed/profile/$id/": {
      "filePath": "_authed/profile.$id.index.tsx",
      "parent": "/_authed"
    },
    "/_authed/tournaments_/create/": {
      "filePath": "_authed/tournaments_.create.index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
